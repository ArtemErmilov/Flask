# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ1
# üìå –°–æ–∑–¥–∞—Ç—å API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∏–º–µ—Ç—å
# –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–≤–∞—Ç—å, –æ–±–Ω–æ–≤–ª—è—Ç—å, —É–¥–∞–ª—è—Ç—å –∏ –ø–æ–ª—É—á–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á.
# üìå –°–æ–∑–¥–∞–π—Ç–µ –º–æ–¥—É–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–µ—Ä–≤–µ—Ä –∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é.
# üìå –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å Task —Å –ø–æ–ª—è–º–∏ id, title, description –∏ status.
# üìå –°–æ–∑–¥–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫ tasks –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á.
# üìå –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á (–º–µ—Ç–æ–¥ GET).
# üìå –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ (–º–µ—Ç–æ–¥ POST).
# üìå –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ (–º–µ—Ç–æ–¥ PUT).
# üìå –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ (–º–µ—Ç–æ–¥ DELETE).
# üìå –†–µ–∞–ª–∏–∑—É–π—Ç–µ –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞.

import logging
from fastapi import FastAPI, HTTPException
from fastapi.responses import HTMLResponse

from typing import Optional,Any, List, Union
from pydantic import BaseModel

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI()

class Task(BaseModel):
    id: int
    title: str
    description: str
    status : str 

tasks = []

@app.get("/")
async def read_root(): # GET –∑–∞–ø—Ä–æ—Å
    logger.info("–û—Ç—Ä–∞–±–æ—Ç–∞–ª GET –∑–∞–ø—Ä–æ—Å.")
    return {"Hello": "World"}

@app.get("/gettask/", response_model=List[Task])
async def read_task(): # GET –∑–∞–ø—Ä–æ—Å
    for dt in tasks:
        print (dt)
    logger.info("\n–û—Ç—Ä–∞–±–æ—Ç–∞–ª GET –∑–∞–ø—Ä–æ—Å. gettask")
    return tasks

@app.get("/gettask/{task_id}", response_model=Task)
async def read_task(task_id:int): # GET –∑–∞–ø—Ä–æ—Å
    for dat in tasks:
        if dat.id == task_id:
            logger.info("\n–û—Ç—Ä–∞–±–æ—Ç–∞–ª GET –∑–∞–ø—Ä–æ—Å.")
            return dat
    return HTTPException(status_code=404, detail="–¢–∞–∫–æ–≥–æ ID –Ω–µ—Ç")

@app.post("/posttask/", response_model=Task)
async def reate_task(task:Task):# POST –∑–∞–ø—Ä–æ—Å
    logger.info('–û—Ç—Ä–∞–±–æ—Ç–∞–ª POST –∑–∞–ø—Ä–æ—Å.')
    tasks.append (task)
    return task

@app.put("/puttask/{task_id}", response_model=Task)
async def update_task(task_id: int, task: Task): # PUT –∑–∞–ø—Ä–æ—Å
    for i, dat in enumerate(tasks):
        if dat.id == task_id:
            tasks[i] = task
            print(dat)
            logger.info(f'–û—Ç—Ä–∞–±–æ—Ç–∞–ª PUT –∑–∞–ø—Ä–æ—Å –¥–ª—è task_id = {task_id}.')
            for d in tasks:
                print(d)
            return dat
    return HTTPException(status_code=404, detail='–¢–∞–∫–æ–≥–æ ID –Ω–µ—Ç')

@app.delete("/deletetask/{task_id}")
async def delete_task(task_id: int): # DELETE –∑–∞–ø—Ä–æ—Å
    for dat in tasks:
        if dat.id == task_id:
            tasks.remove(dat)
            logger.info(f'–û—Ç—Ä–∞–±–æ—Ç–∞–ª DELETE –∑–∞–ø—Ä–æ—Å –¥–ª—è item id = {task_id}.')
            # return {"item_id": item_id}
            return dat
    return HTTPException(status_code=404, detail='–¢–∞–∫–æ–≥–æ ID –Ω–µ—Ç')

def add_tasks(tasks: list, num:int):

    return