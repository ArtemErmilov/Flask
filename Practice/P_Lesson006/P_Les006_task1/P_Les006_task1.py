# –ó–∞–¥–∞–Ω–∏–µ 1

#  –†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å
# –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite. –î–ª—è —ç—Ç–æ–≥–æ —Å–æ–∑–¥–∞–π—Ç–µ
# –º–æ–¥–µ–ª—å User —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø–æ–ª—è–º–∏:
#     ‚óã id: int (–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è
#     –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
#     ‚óã username: str (–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
#     ‚óã email: str (—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
#     ‚óã password: str (–ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)

# API –¥–æ–ª–∂–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:

#       ‚óã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: GET /users/
#       ‚óã –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: GET /users/{user_id}/
#       ‚óã –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: POST /users/
#       ‚óã –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: PUT /users/{user_id}/
#       ‚óã –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: DELETE /users/{user_id}/
# üìå –î–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã Field –º–æ–¥–µ–ª–∏ User.
# üìå –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ SQLAlchemy –∏ –º–æ–¥—É–ª—å databases.

import databases
import sqlalchemy
from fastapi import FastAPI
from pydantic import BaseModel, Field


DATABASE_URL = "sqlite:///Practice/P_Lesson006/P_Les006_task1/instance/mydatabase.db" # –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ - –∞–¥—Ä–µ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

database = databases.Database(DATABASE_URL) # –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
metadata = sqlalchemy.MetaData()

# –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞–º–∏ —Å –ø–æ–ª—è–º–∏

users = sqlalchemy.Table( # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    "users",
    metadata,
    sqlalchemy.Column("id", sqlalchemy.Integer,
    primary_key=True),
    sqlalchemy.Column("username", sqlalchemy.String(32)),
    sqlalchemy.Column("email", sqlalchemy.String(128)),
    sqlalchemy.Column("password", sqlalchemy.String(32)),
)

engine = sqlalchemy.create_engine(DATABASE_URL, connect_args={"check_same_thread": False})
#{"check_same_thread": False} - –∏—Å–ø–æ–ª—å–∑—É–∏—Å—è –¥–ª—è –∫–æ–Ω–µ–∫–µ–∫—Ç–∞ –Ω–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ sqllit –∏ sqlachemy

metadata.create_all(engine)

app = FastAPI()

class UserIn(BaseModel):
    username: str = Field(max_length=32)
    email: str = Field(max_length=128)
    password: str = Field(max_length=32)

class User(BaseModel):
    id: int
    username: str = Field(max_length=32)
    email: str = Field(max_length=128)
    password: str = Field(max_length=32)

# @app.get("/fake_users/{count}")
# async def create_note(count: int):
#     for i in range(1,count):
#         query = users.insert().values(username=f'name{i}',email=f'mail{i}@mail.ru',password=f'pass{i}')
#         await database.execute(query)
#     return {'message': f'{count} fake users create'}


from typing import List 
# –ß—Ç–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î, read. –ß—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –≤—ã–≤–æ–¥ –∏—Ö –≤ –≤–∏–¥–µ jsone —Ñ–∞–π–ª–∞. 
@app.get("/users/read_users/", response_model=List[User])
async def read_users():
    query = users.select() #–í—ã–±–æ—Ä –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Å–ø–∏—Å–∫–∞. 
    return await database.fetch_all(query)# –í—ã–≤–æ–¥ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö

# –ß—Ç–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î –ø–æ ID, read –∏ –≤—ã–≤–æ–¥ –µ–≥–æ –¥–∞–Ω–Ω—ã—Ö 
@app.get("/users/read_user/{user_id}", response_model=User)
async def read_user(user_id: int):
    query = users.select().where(users.c.id == user_id)
    return await database.fetch_one(query) # –í—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î, create
@app.post("/users/create/", response_model=User)
async def create_user(user: UserIn):
    query = users.insert().values(username=user.username,email=user.email,password=user.password)
    last_record_id = await database.execute(query) # last_record_id =
    return {**user.model_dump(), "id": last_record_id }# "id": last_record_id


# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –ø–æ ID, update
@app.put("/users/update/{user_id}", response_model=User)
async def update_user(user_id: int, new_user: UserIn):
    query = users.update().where(users.c.id == user_id).values(**new_user.dict())# update - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö, where - –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID, values - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö 
    await database.execute(query)
    return {**new_user.dict(), "id": user_id}

# –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î –ø–æ ID, delete
@app.delete("/users/delete/{user_id}")
async def delete_user(user_id: int):
    query = users.delete().where(users.c.id == user_id)
    await database.execute(query)
    return {'message': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω.'}


# uvicorn Practice.P_Lesson006.P_Les006_task1.P_Les006_task1:app --reload
