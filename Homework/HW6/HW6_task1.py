# –î–ó ‚Ññ6
# üìå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ–ª–∂–Ω–∞
# —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ —Ç—Ä–µ—Ö —Ç–∞–±–ª–∏—Ü: —Ç–æ–≤–∞—Ä—ã, –∑–∞–∫–∞–∑—ã –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏. –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä—ã –¥–æ–ª–∂–Ω–∞
# —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö, –∏—Ö –æ–ø–∏—Å–∞–Ω–∏—è—Ö –∏ —Ü–µ–Ω–∞—Ö. –¢–∞–±–ª–∏—Ü–∞
# –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
# –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –º–∞–≥–∞–∑–∏–Ω–∞. –¢–∞–±–ª–∏—Ü–∞ –∑–∞–∫–∞–∑—ã –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ
# –∑–∞–∫–∞–∑–∞—Ö, —Å–¥–µ–ª–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
#     ‚óã –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ª—è: id (PRIMARY KEY),
#     –∏–º—è, —Ñ–∞–º–∏–ª–∏—è, –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –∏ –ø–∞—Ä–æ–ª—å.
#     ‚óã –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ª—è: id (PRIMARY KEY),
#     –Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Ü–µ–Ω–∞.
#     ‚óã –¢–∞–±–ª–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ª—è: id (PRIMARY KEY), id
#     –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (FOREIGN KEY), id —Ç–æ–≤–∞—Ä–∞ (FOREIGN KEY), –¥–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ –∏ —Å—Ç–∞—Ç—É—Å
#     –∑–∞–∫–∞–∑–∞.

# üìå –°–æ–∑–¥–∞–π—Ç–µ –º–æ–¥–µ–ª–∏ pydantic –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏
# –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≤ –ë–î –¥–ª—è –∫–∞–∂–¥–æ–π –∏–∑ —Ç—Ä—ë—Ö —Ç–∞–±–ª–∏—Ü
# (–∏—Ç–æ–≥–æ —à–µ—Å—Ç—å –º–æ–¥–µ–ª–µ–π).

# üìå –†–µ–∞–ª–∏–∑—É–π—Ç–µ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∏–∑ —Ç–∞–±–ª–∏—Ü —á–µ—Ä–µ–∑
# —Å–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤, REST API (–∏—Ç–æ–≥–æ 15 –º–∞—Ä—à—Ä—É—Ç–æ–≤).
#     ‚óã –ß—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö
#     ‚óã –ß—Ç–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ
#     ‚óã –ó–∞–ø–∏—Å—å
#     ‚óã –ò–∑–º–µ–Ω–µ–Ω–∏–µ
#     ‚óã –£–¥–∞–ª–µ–Ω–∏–µ

import databases
import sqlalchemy
from fastapi import FastAPI
from pydantic import BaseModel, Field
from typing import List
from datetime import datetime, timedelta
import random 

# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DATABASE_URL = "sqlite:///Homework/HW6/instance/databaseHW6.db" 

database = databases.Database(DATABASE_URL)
metadata = sqlalchemy.MetaData()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü

# –¢–æ–≤–∞—Ä—ã
products = sqlalchemy.Table( # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ç–æ–≤–∞—Ä—ã 
    "products",
    metadata,
    sqlalchemy.Column("id", sqlalchemy.Integer,
    primary_key=True),
    sqlalchemy.Column("product_name", sqlalchemy.String(128)),
    sqlalchemy.Column("description", sqlalchemy.String),
    sqlalchemy.Column("price", sqlalchemy.Float),
)

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
users = sqlalchemy.Table( # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ 
    "users",
    metadata,
    sqlalchemy.Column("id", sqlalchemy.Integer,
    primary_key=True),
    sqlalchemy.Column("name", sqlalchemy.String(32)),
    sqlalchemy.Column("surname", sqlalchemy.String(32)),
    sqlalchemy.Column("email", sqlalchemy.String(128)),
    sqlalchemy.Column("password", sqlalchemy.String(32)),
)

# –ó–∞–∫–∞–∑—ã
orders = sqlalchemy.Table( # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∑–∞–∫–∞–∑—ã 
    "orders",
    metadata,
    sqlalchemy.Column("id", sqlalchemy.Integer,
    primary_key=True),
    sqlalchemy.Column("id_user", sqlalchemy.Integer, sqlalchemy.ForeignKey('users.id')),
    sqlalchemy.Column("id_products", sqlalchemy.Integer, sqlalchemy.ForeignKey('products.id')),
    sqlalchemy.Column("order_date", sqlalchemy.DateTime),
    sqlalchemy.Column("status", sqlalchemy.String(128)),
)

engine = sqlalchemy.create_engine(DATABASE_URL, connect_args={"check_same_thread": False})
#{"check_same_thread": False} - –∏—Å–ø–æ–ª—å–∑—É–∏—Å—è –¥–ª—è –∫–æ–Ω–µ–∫–µ–∫—Ç–∞ –Ω–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ sqllit –∏ sqlachemy

metadata.create_all(engine)

app = FastAPI()

class UserIn(BaseModel):
    name: str = Field(max_length=32)
    surname: str = Field(max_length=32)
    email: str = Field(max_length=128)
    password: str = Field(max_length=32)

class User(UserIn):
    id: int

@app.get("/in_users/{count}") # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º–∏
async def create_users(count: int):
    for i in range(1,count+1):
        query = users.insert().values(name=f'–ò–º—è{i}', surname=f'–§–∞–º–∏–ª–∏—è{i}', email=f'mail{i}@mail.ru', password=f'pass{i}')
        await database.execute(query)
    return {'message': f'–°–æ–∑–¥–∞–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.'}

class ProductsIn(BaseModel):
    product_name:str = Field(max_length=32)
    description:str = Field(max_length=1500)
    price:float = Field()

class Products(ProductsIn):
    id: int

@app.get("/in_products/{count}") # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã —Ç–æ–≤–∞—Ä–∞–º–∏
async def create_products(count: int):
    for i in range(1,count+1):
        query = products.insert().values(product_name=f'–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞{i}', description=f'–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞{i}', price=random.uniform(1000,100_000))
        await database.execute(query)
    return {'message': f'–°–æ–∑–¥–∞–Ω–æ {count} —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.'}

class OrdersIn(BaseModel):
    id_user:int = Field()
    id_products:int = Field()
    order_date:datetime = Field()
    status:str = Field(max_length=128)

class Orders(OrdersIn):
    id: int

@app.get("/in_orders/{count}") # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –∑–∞–∫–∞–∑–∞–º–∏
async def create_orders(count: int):
    status_list = ['–í –æ–±—Ä–∞–±–æ—Ç–∫–µ.', '–í –¥–æ—Å—Ç–∞–≤–∫–µ.', '–í –ø—É–Ω–∫—Ç–µ –≤—ã–¥–∞—á–∏.','–ó–∞–±—Ä–∞–Ω –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º.']
    query_users = users.select()
    qu = await database.fetch_all(query_users)
    query_products = products.select()
    qp = await database.fetch_all(query_products)
    list_id_us = []
    list_id_prod = []
    for us in qu:
       list_id_us.append(us[0])
    for pr in qp:
       list_id_prod.append(pr[0])
    for i in range(1,count+1):
        query = orders.insert().values(id_user=random.choice(list_id_us), id_products = random.choice(list_id_prod), order_date = datetime.utcnow() - timedelta(hours= (count-i), minutes=random.randint(1,60)), status = random.choice(status_list))
        await database.execute(query) # order_date = datetime.utcnow(),
     
    return {'message': f'–°–æ–∑–¥–∞–Ω–æ {count} –∑–∞–∫–∞–∑–æ–≤.'}


# –í–Ω–µ—Å–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
# –ß—Ç–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î, read. –ß—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –≤—ã–≤–æ–¥ –∏—Ö –≤ –≤–∏–¥–µ jsone —Ñ–∞–π–ª–∞. 
@app.get("/users/read_user/", response_model=List[User])
async def read_users():
    query = users.select() #–í—ã–±–æ—Ä –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Å–ø–∏—Å–∫–∞. 
    return await database.fetch_all(query)# –í—ã–≤–æ–¥ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö

# –ß—Ç–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î –ø–æ ID, read –∏ –≤—ã–≤–æ–¥ –µ–≥–æ –¥–∞–Ω–Ω—ã—Ö 
@app.get("/users/read_user/{user_id}", response_model=User)
async def read_user(user_id: int):
    query = users.select().where(users.c.id == user_id)
    return await database.fetch_one(query) # –í—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î, create
@app.post("/users/create/", response_model=User)
async def create_user(user: UserIn):
    query = users.insert().values(name=user.name, surname=user.surname, email=user.email,password=user.password)
    last_record_id = await database.execute(query) # last_record_id =
    return {**user.model_dump(), "id": last_record_id }# "id": last_record_id


# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –ø–æ ID, update
@app.put("/users/update/{user_id}", response_model=User)
async def update_user(user_id: int, new_user: UserIn):
    query = users.update().where(users.c.id == user_id).values(**new_user.dict())# update - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö, where - –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID, values - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö 
    await database.execute(query)
    return {**new_user.dict(), "id": user_id}

# –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î –ø–æ ID, delete
@app.delete("/users/delete/{user_id}")
async def delete_user(user_id: int):
    query = users.delete().where(users.c.id == user_id)
    await database.execute(query)
    return {'message': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω.'}

# –í–Ω–µ—Å–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç–æ–≤–∞—Ä–∞–º

# –ß—Ç–µ–Ω–∏–µ –ø–µ—Ä–µ—á–Ω—è —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ë–î, read. 
@app.get("/product/read_products/", response_model=List[Products])
async def read_products():
    query = products.select() #–í—ã–±–æ—Ä –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞. 
    return await database.fetch_all(query)# –í—ã–≤–æ–¥ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö

# –ß—Ç–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –ë–î –ø–æ ID, read –∏ –≤—ã–≤–æ–¥ –µ–≥–æ –¥–∞–Ω–Ω—ã—Ö 
@app.get("/product/read_product/{product_id}", response_model=Products)
async def read_product(product_id: int):
    query = products.select().where(products.c.id == product_id)
    return await database.fetch_one(query) # –í—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä –≤ –ë–î, create
@app.post("/product/create/", response_model=Products)# response_model=Products
async def create_product_new(product: ProductsIn):
    query = products.insert().values(product_name=product.product_name, description=product.description, price=product.price)
    last_record_id = await database.execute(query) 
    return {**product.model_dump(), "id": last_record_id }

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç–æ–≤–∞—Ä–∞–º –≤ –ë–î –ø–æ ID, update
@app.put("/product/update/{product_id}", response_model=Products)
async def update_product(product_id: int, new_product: ProductsIn):
    query = products.update().where(products.c.id == product_id).values(**new_product.dict())# update - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö, where - –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID, values - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö 
    await database.execute(query)
    return {**new_product.dict(), "id": product_id}

# –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ –ë–î –ø–æ ID, delete
@app.delete("/product/delete/{product_id}")
async def delete_product(product_id: int):
    query = products.delete().where( products.c.id ==  product_id)
    await database.execute(query)
    return {'message': '–ü—Ä–æ–¥—É–∫—Ç —É–¥–∞–ª—ë–Ω.'}



# –í–Ω–µ—Å–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∑–∞–∫–∞–∑–∞–º

# –ß—Ç–µ–Ω–∏–µ –ø–µ—Ä–µ—á–Ω—è –∑–∞–∫–∞–∑–æ–≤ –∏–∑ –ë–î, read. 
@app.get("/orders/read_orders/", response_model=List[Orders])
async def read_orders():
    query = orders.select() #–í—ã–±–æ—Ä –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞. 
    return await database.fetch_all(query)# –í—ã–≤–æ–¥ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö

# –ß—Ç–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –∏–∑ –ë–î –ø–æ ID, read –∏ –≤—ã–≤–æ–¥ –µ–≥–æ –¥–∞–Ω–Ω—ã—Ö 
@app.get("/orders/read_order/{product_id}", response_model=Orders)
async def read_order(order_id: int):
    query = orders.select().where(orders.c.id == order_id)
    return await database.fetch_one(query) # –í—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞


# –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏–∑ –ë–î –ø–æ ID, delete
@app.delete("/orders/delete/{product_id}")
async def delete_orders(order_id: int):
    query = orders.delete().where(orders.c.id == order_id)
    await database.execute(query)
    return {'message': '–ó–∞–∫–∞–∑ —É–¥–∞–ª—ë–Ω.'}


# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ –≤ –ë–î, create
@app.post("/orders/create/")# response_model=Orders
async def create_orders_new(order: OrdersIn):
    query_user = users.select().where(users.c.id == order.id_user)
    dat_user = await database.fetch_one(query_user) 
    query_prod = products.select().where(products.c.id == order.id_products)
    dat_prod = await database.fetch_one(query_prod) 
    if (not dat_user ):
        return {'message': f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {order.id_user} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!'} 
    elif (not dat_prod):
         return {'message': f'–¢–æ–≤–∞—Ä–∞ —Å ID {order.id_products} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!'} 
    query =  orders.insert().values(id_user=order.id_user, id_products=order.id_products, order_date=order.order_date, status=order.status)
    last_record_id = await database.execute(query) 
    return {**order.model_dump(), "id": last_record_id } 


# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∑–∞–∫–∞–∑—É –≤ –ë–î –ø–æ ID, update
@app.put("/orders/update/{orders_id}")# response_model=Products
async def update_orders(order_id: int, new_order: OrdersIn):
    query_user = users.select().where(users.c.id == new_order.id_user)
    dat_user = await database.fetch_one(query_user) 
    query_prod = products.select().where(products.c.id == new_order.id_products)
    dat_prod = await database.fetch_one(query_prod) 
    if (not dat_user ):
        return {'message': f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {new_order.id_user} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!'} 
    elif (not dat_prod):
         return {'message': f'–¢–æ–≤–∞—Ä–∞ —Å ID {new_order.id_products} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!'} 
    query = orders.update().where(orders.c.id == order_id).values(**new_order.dict())# update - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö, where - –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID, values - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö 
    await database.execute(query)
    return {**new_order.dict(), "id": order_id}


# uvicorn Homework.HW6.HW6_task1:app --reload